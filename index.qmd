---
title: "Introducing {gtreg}"
author: "Shannon Pileggi & Daniel D. Sjoberg"
footer:  "[Introducing {gtreg}](https://shannonpileggi.github.io/introducing-gtreg-rmed-2022/)"
logo: "img/gtreg-logo.png"
editor: source
format: 
  revealjs: 
    theme: slides.scss
    transition: fade
    slide-number: true
    chalkboard: true
---

# Introduction

```{r}
knitr::opts_chunk$set(echo = TRUE, results = 'asis')
library(gtsummary)
library(tidyverse)
library(gtreg)
library(gt)
knit_print.gtsummary <- function(x, ...) {
  gtsummary::as_gt(x) |> gt::as_raw_html()
}
registerS3method("knit_print", "gtsummary", knit_print.gtsummary)
# fill for font awesome icons
fa_fill <- "#606060"
```

## Licensing

<br>

<br>

This presentation is licensed under a [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/) (CC BY-SA4.0).




## 

:::: {.columns}


::: {.column width="50%"}

**Shannon Pileggi**

![](img/Shannon_circle.png){width="57%"}

`r fontawesome::fa("link", fill = fa_fill)` [pipinghotdata.com](https://www.pipinghotdata.com/)

`r fontawesome::fa("twitter", fill = fa_fill)` [\@PipingHotData](https://twitter.com/PipingHotData)

`r fontawesome::fa("github", fill = fa_fill)` [github.com/shannonpileggi](https://github.com/shannonpileggi/)

`r fontawesome::fa("linkedin", fill = fa_fill)` [linkedin.com/in/shannon-m-pileggi/](https://www.linkedin.com/in/shannon-m-pileggi/)

:::


::: {.column width="50%"}

**Daniel Sjoberg**

![](img/dan-modified.png)

`r fontawesome::fa("link", fill = fa_fill)` [danieldsjoberg.com](https://www.danieldsjoberg.com/)

`r fontawesome::fa("twitter", fill = fa_fill)` [\@statistishdan](https://twitter.com/statistishdan)

`r fontawesome::fa("github", fill = fa_fill)` [github.com/ddsjoberg](https://github.com/ddsjoberg/)

`r fontawesome::fa("linkedin", fill = fa_fill)` [linkedin.com/in/ddsjoberg/](https://www.linkedin.com/in/ddsjoberg/)
:::


::::


## Checklist

<br>

`r fontawesome::fa("check", fill = fa_fill)` R installed? Pretty recent?

    I am on version `r stringr::word(R.version.string, 3, 3)`

`r fontawesome::fa("check", fill = fa_fill)` RStudio installed? Pretty recent?

    I am on version 2022.07.1+554 

`r fontawesome::fa("check", fill = fa_fill)` Have these packages?

``` r
install.packages(c("tidyverse", "labelled", "gtsummary", "gtreg"))
```

## gtreg 

:::: {.columns .v-center-container}


::: {.column width="40%"}

![](img/gtreg_hex_hires.png)
:::


::: {.column width="60%"}

<https://shannonpileggi.github.io/gtreg/>

:::

::::

## {gtreg} overview

![](img/gtreg_overview.svg)

::: notes
image from google slides

https://docs.google.com/presentation/d/1Wf8Wdc28UmtSHqwu3-pYg7ZaW52T5l_hjW0roxyMI1k/edit?usp=sharing
:::

# About adverse events

## Adverse events

```{r, echo=FALSE}
df_adverse_events |> 
  select(patient_id:drug_attribution) |> 
  slice(1:5) |> 
  gt::gt()
```


* An adverse event (AE) is a medical issue that occurs during the course of treatment or observation.

* AEs are classified according to a [hierarchy](https://www.meddra.org/how-to-use/basics/hierarchy), and we typically report
lower level terms within a system organ class.

* AEs also record severity / grade and likelihood of attribution to treatment.

## Summary table challenges

```{r, echo=FALSE}
df_adverse_events |> 
  select(patient_id:drug_attribution) |> 
  slice(1:5) |> 
  gt::gt()
```


* Subjects experience multiple adverse events.

* Not all enrolled subjects experience an adverse event.

* The percent of subjects experiencing specific AEs is of interest; typically AEs
are counted by maximum grade per event per subject.

* Multiple AE tables are often required (treatment emergent AEs, AEs on specific
treatment cycles, serious AEs, etc.).


## Counting by maximum grade

<br>

```{r, echo=FALSE}
df_adverse_events |> 
  select(patient_id, system_organ_class, adverse_event, grade) |> 
  slice(1:5) |>
  gt::gt() 
```



## Counting by maximum grade {transition="fade" visibility="uncounted"}

<br>

```{r, echo=FALSE}
df_adverse_events |> 
  select(patient_id, system_organ_class, adverse_event, grade) |> 
  mutate(ae_label = case_when(
    adverse_event == "Anaemia" ~ "Term 1",
    adverse_event == "Increased tendency to bruise" ~ "Term 2",
    adverse_event == "Thrombocytopenia" ~ "Term 3"
  )) |> 
  slice(1:5) |>
  tbl_listing(group_by = ae_label) |> 
  bold_labels()
```

## Counting by maximum grade {transition="fade" visibility="uncounted"}

<br>

```{r, echo=FALSE}
df_adverse_events |> 
  select(patient_id, system_organ_class, adverse_event, grade) |> 
  mutate(ae_label = case_when(
    adverse_event == "Anaemia" ~ "Term 1",
    adverse_event == "Increased tendency to bruise" ~ "Term 2",
    adverse_event == "Thrombocytopenia" ~ "Term 3"
  )) |> 
  slice(1:5) |>
  tbl_listing(group_by = ae_label) |> 
  bold_labels() |> 
  as_gt() |> 
  gt::tab_style(
    style = list(
      cell_fill(color = "#FFFBC8")
      ),
    locations = cells_body(rows = c(2, 4, 8))
  )
```


. . .

<br>

Similar logic applies when counting by severity (e.g. mild, moderate, severe) - if stored as a factor,
the highest factor level is retained (severe).

# Adverse event tabulation

# Other convenience functions
